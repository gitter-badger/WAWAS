<?php

class Protocol extends WAObject
{
  protected $modules = array();
  protected $hooks = array();

  public function __construct()
  {
    parent::__construct();
  }

  public function registerModule($name, $object)
  {
    $this->modules[$name] = $object;
  }

  public function registerHook($type, $module, $function)
  {
    $this->hooks[$type][$module] = $function;
  }

  public function getHooks($type)
  {
    if (isset($this->hooks[$type]))
      return $this->hooks[$type];
    return array();
  }

  public function unregisterHook($type, $module)
  {
    if (isset($this->hooks[$type]) && isset($this->hooks[$type][$module]))
      unset($this->hooks[$type][$module]);
  }

  public function callHooks($type, $params)
  {
    if (!isset($this->hooks[$type]))
      return;
    if (!$params)
      $params = array();
    foreach($this->hooks[$type] as $m => $function)
      call_user_func_array(array($this->modules[$m], $function), $params);

//      $this->modules[$m]->$function($params);
  }

  public function start()
  {
    foreach($this->modules as $module)
    {
      $module->start($this);
    }
  }

  public function createRequest($client)
  {
    return null;
  }

  public function createResponse()
  {
    return null;
  }

  public function check($buffer)
  {
    return false;
  }

  public function process($data, $request, $response)
  {
  }

}

?>