<?php

/* @DESCR -- Do not edit

WebAbility Base Version: >= 3
Module: Common
Language: >= PHP5 only
Creation: 09/Mar/2006
Copyright: Ing. Philippe Thomassigny (c) 2002-2006

-

@End_DESCR */

/* @UML_Box -- Do not edit
|------------------------------------------------------------------|
| HTTPRequest : Contains all HTTP request data                     |
|------------------------------------------------------------------|
|------------------------------------------------------------------|
|------------------------------------------------------------------|
@End_UML_Box */

class HTTPRequest extends WAClass implements Request
{
  public $hasheaders = false;
  public $rawheaders = '';

  public $needbody = false;
  public $hasbody = false;
  public $rawbody = '';
  public $lengthbody = 0;

  public $protocol = null;
  public $vhost = null;
  public $client = null;

  public $http = array();
  public $request = array();
  public $gets = array();
  public $headers = array();
  public $cookies = array();

  public $posts = array();
  public $files = array();

  public function __construct()
  {
    parent::__construct();
    if (self::$debug || $this->localdebug)
      $this->doDebug("HTTPRequest->__construct()", WADebug::SYSTEM);
  }

  public function clear()
  {
// Those 2 basic object are supposed to NOT change if the request is reused...
//     $this->protocol = $this->client = null;
    $this->vhost = null;
    $this->rawheaders = $this->rawbody = '';
    $this->http = $this->request = $this->gets = $this->headers = $this->cookies = $this->posts = $this->files = array();
    $this->hasheaders = $this->hasbody = false;
  }

  public function getHTTP($key = null)
  {
    if ($key === null)
      return $this->http;
    if (isset($this->http[$key]))
      return $this->http[$key];
    return null;
  }

  public function getRequest($key = null)
  {
    if ($key === null)
      return $this->request;
    if (isset($this->request[$key]))
      return $this->request[$key];
    return null;
  }

  public function getGet($var = null)
  {
    if ($var === null)
      return $this->gets;
    if (isset($this->gets[$var]))
      return $this->gets[$var];
    return null;
  }

  public function getHeader($var = null)
  {
    if ($var === null)
      return $this->headers;
    if (isset($this->headers[$var]))
      return $this->headers[$var];
    return null;
  }

  public function getCookie($var = null)
  {
    if ($var === null)
      return $this->cookies;
    if (isset($this->cookies[$var]))
      return $this->cookies[$var];
    return null;
  }

  public function getPost($var = null)
  {
    if ($var === null)
      return $this->posts;
    if (isset($this->posts[$var]))
      return $this->posts[$var];
    return null;
  }

}

?>