<?php

final class Cookies extends WAClass
{
  private $listener = null;
  private $virtualhosts = null;

  private $socket = null;

  function __construct($listener)
  {
    parent::__construct();

    $this->listener = $listener;
  }

  // ==================================
  // Socket functions
  // ==================================
  public function openListener()
  {
    // 1. Create the TCP socket for streams
    $socket = socket_create(AF_INET, SOCK_STREAM, 0);

    if (!$socket)
      return false;

    // 2. Bind the socket
    if (!socket_bind($socket, $this->listener["ip"], $this->listener["port"]))
    {
print $this->listener["ip"] . ' : ' . $this->listener["port"] . "\n";
      socket_close($socket);
      return false;
    }

    // 3. Start listening
    if (!socket_listen($socket))
    {
      socket_close($socket);
      return false;
    }

    // Save the socket
    $this->socket = $socket;

    if ($this->logger)
      $this->logger->insertLog(1, "Socket opened and listening: ".$this->listener["ip"].":".$this->listener["port"]);

    // we finally set socket on non-block, the main manager will work onto times and idles
    socket_set_nonblock($socket);
    return $socket;
  }

  public function closeListener()
  {
    if ($this->socket)
    {
      socket_shutdown($this->socket);
      socket_close($this->socket);
      $this->socket = null;
      if ($this->logger)
        $this->logger->insertLog(1, "Socket closed ".$this->listener["ip"].":".$this->listener["port"]);
    }
  }

  // ==================================
  // Virtual hosts control
  // ==================================
  public function registerVirtualHost($OV)
  {
    $hosts = $OV->getHosts();
    foreach($hosts as $h)
    {
//      if ($this->debug)
        $this->base->insertDebug(1, "Register virtual host $h");
      $this->virtualhosts[$h] = $OV;
    }
  }

  public function getVirtualHost($host)
  {
//print $host;
//var_dump($this->virtualhosts);
    foreach($this->virtualhosts as $h => $v)
    {
      if ($h == $host)
        return $v;
    }
    return null;
  }

  // ==================================
  // Informative funtions
  // ==================================
  public function getIP()
  {
    return $this->listener["ip"];
  }

  public function getPort()
  {
    return $this->listener["port"];
  }

  public function getSocket()
  {
    return $this->socket;
  }

  public function getProxyIP()
  {
    return $this->listener["proxyip"];
  }

  public function getProxyPort()
  {
    return $this->listener["proxyport"];
  }

}

?>