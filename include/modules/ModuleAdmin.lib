<?php

namespace modules;

class ModuleAdmin extends Module
{
  private $shmid;
  private $shmsize;
  private static $shm;
  private static $sem;
  
  // Admin stock the data into SHM

  function __construct($config)
  {
    parent::__construct($config);
    
    $this->shmid = $config->admin->shmid;
    $this->shmsize = $config->admin->shmsize; // size should be proportional to maxthreads and max hits per thread

    // clean the shared memory
    $this->flush();
  }
  
  // The init method called once at the beginning of the server
  public function init($modules, $protocols, $listeners) 
  {
    $data = array();
    // crea el shared segment 0, con los datos basicos
    foreach($modules as $module)
      $data['modules'][] = $module->name;
    foreach($protocols as $protocol)
      $data['protocols'][] = $protocol->name;
    foreach($listeners as $listener)
      $data['listeners'][] = $listener->name;
    
    $this->write(0, $data);
    $this->write(1, array());
  }
  
  // The loop method is informative only for the module called each loop
  public function loop($counter)
  {
    $data = $this->read(0);
    $data['counter'] = $counter;
    $this->write(0, $data);
  }
  
  public function start($context)
  {
    $threadid = $context->threadid;

    $data = $this->read(1);
    if (!isset($data[$threadid]))
      $data[$threadid] = true;
    $this->write(1, $data);
  }

  public function receivedata($context, $input)
  {
    $threadid = $context->threadid;

    $data = $this->read($threadid);
    if (!$data)
    {
      $data = array('input' => 0, 'output' => 0);
   }
    $data['input'] += strlen($input);
    $this->write($threadid, $data);
  }

  public function senddata($context, $output)
  {
    $threadid = $context->threadid;
    $data = $this->read($threadid);
    $data['output'] += strlen($output);
    $this->write($threadid, $data);
  }

  public function process($context) // $host, $request, $response)
  {
    $this->hits++;
    try
    {
      $BASE_P = null;
      $URI = strtolower($context->request->http['request']);
      if ($URI)
      {
        // Remove query part (already managed by PHP)
        if (strpos($URI, '?'))
        {
          $URI = substr($URI, 0, strpos($URI, '?'));
        }
        if (substr($URI, -1) == '/' && strlen($URI) > 1)
        {
          // NO ACEPTAMOS URLS QUE TERMINAN CON /, REDIRECCIONAMOS !!
          $URI = substr($URI, 0, -1);
//          header('HTTP/1.1 301 Moved Permanently');
//          header('Location: ' . $URI . $QUERY);
//          return;
        }
        if (strlen($URI) > 1)
          $BASE_P = $URI;
      }

      ob_start();
      
      $baseobject = '\\admin\\Base';
      $configfile = 'include/admin/admin.conf';
      $config = new \xconfig\XConfig(file_get_contents($configfile));

      // setup config
      if ($baseobject::hasInstance())
        $base = $baseobject::getInstance();
      else
        $base = new $baseobject($config, $context);
      
      // call engine
      $engine = new \xamboo\engine($URI);
      // $engine->SKIN = 'myskin';
      $data = $engine->run($BASE_P);
      
      $data = $base->postrun($data);
      
      $extras = ob_get_contents();
      ob_end_clean();

      $context->response->body = $data . $extras;
      $context->response->setHeader('Date', date ("r", time()));
      $context->response->setHeader('Content-Length', strlen($context->response->body));
      
      $context->response->setHeader('Content-Type', 'text/html');
    }
    catch (\Error $t)
    {
      $data = 'Error interno: ' . $t;
      $context->response->body = nl2br($data);
      $context->response->setHeader('Date', date ("r", time()));
      $context->response->setHeader('Content-Length', strlen($context->response->body));
      
      $context->response->setHeader('Content-Type', 'text/html');
    }
    return true;    
    
    
    
    
    
    
    $this->hits++;

    // Cantidad de threads
    // Memoria usada
    // reload en 1 sec
    // historico alguno ?

    $loaded = $this->read(0);
    $loadedtext = print_r($loaded, true);

    $threads = $this->read(1);
    $threadstext = print_r($threads, true);
    
    $txt = '';
    foreach($threads as $id => $th)
    {
      $thdata = $this->read($id);
      $txt .= $id . " :: " . print_r($thdata, true);
    }

    foreach($context->modules as $mod => $mdata)
    {
      $txt .= $mod . " :: " . $mdata->hits . '<br />';
    }
    
    
    
    $data = <<<EOF
<html>
  <head>
    <title>Stats Admin Server</title>
    <meta http-equiv="refresh" content="5">
  </head>
  <body>
  Counter: {$loaded['counter']}
  <table border="1"><tr><td style="vertical-align: top;">
  <pre>
Loaded: <b>{$loadedtext}</b><br />
</pre>
   </td><td style="vertical-align: top;">
   <pre>
Threads: <b>{$threadstext}</b><br />
</pre>
   </td><td style="vertical-align: top;">
   <pre>
   {$txt}
   </pre>
   </td></tr>
   </table>
<br />
  </body>
</html>    
EOF;

/*
    ob_start();
    phpinfo();
    $data .= ob_get_clean();
*/

    $context->response->body = $data;
    $context->response->setHeader('Date', date ("r", time()));
    $context->response->setHeader('Content-Length', strlen($context->response->body));
    
    $context->response->setHeader('Content-Type', 'text/html');
    return true;
  }
  
  public function stop($context)
  {
    $threadid = $context->threadid;

    $data = $this->read(1);
    if (isset($data[$threadid]))
    {
      unset($data[$threadid]);
      @shm_remove_var(self::$shm, $threadid);
    }
    $this->write(1, $data);
  }
  
  
  
  // =======================================
  // SHM basic fcts
  private function attach()
  {
    if (!self::$shm)
      self::$shm = shm_attach($this->shmid, $this->shmsize);    
    self::$sem = sem_get($this->shmid, 1, 0666, -1); 
    $res = sem_acquire(self::$sem);
    if (!$res)
      throw new \Error('Error: could not acquire Semaphore');
  }

  private function detach()
  {
    sem_release(self::$sem);
    self::$sem = null;
  }

  private function write($id, $data)
  {
    $this->attach();
    if (!shm_put_var(self::$shm, $id, $data))
      throw new \Error('Error: could not write SHM');
    $this->detach();
  }

  private function read($id)
  {
    $this->attach();
    $data = @shm_get_var(self::$shm, $id);
    $this->detach();
    return $data;
  }

  private function flush()
  {
    // connect resource, lock
    $this->attach();
    // We clean the shm
    shm_remove(self::$shm);
    shm_detach(self::$shm);
    self::$shm = null;
    // unlock
    $this->detach();
  }
  

}

?>