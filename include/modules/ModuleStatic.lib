<?php

namespace modules;

class ModuleStatic extends Module
{
  private $mimes;

  private $filename;

  function __construct($config)
  {
    parent::__construct($config);
    
    // load mimes
    $this->mimes = array();
    $mimefile = $config->mimes->file;
    if (!is_file($mimefile))
      throw new Error("Error, the mime file does not exist: ".$mimefile);
    $mimes = file($mimefile);
    foreach ($mimes as $mime)
    {
      if (!trim($mime))
        continue;
      if (substr(trim($mime), 0, 1) == '#')
        continue;
      $type = strtok($mime, " \t");
      $ext = strtok('');
      if (!$type || !$ext)
        continue;
      $xext = explode(' ', $ext);
      foreach($xext as $e)
      {
        $this->mimes[trim($e)] = trim($type);
      }
    }

    // Register hook to process requests
//    $protocol->registerHook('process', $this->name, "process");
  }

  public function process($context) //$host, $request, $response)
  {
    $this->hits++;
    $host = $context->host;
    
    // check si tenemos un match para ejecutar este modulo
    $basedir = $host->documentroot;
    $path = $context->request->http['path'];

    $found = false;
    if (is_file($basedir . $path))
    {
      $filename = $basedir . $path;
      $found = true;
    }
    
    if (!$found)
    {
      if (substr($basedir . $path, -1) != '/')
        $path .= '/';
      // search for the indexes into this dir
      // Check if the result is not OUTSIDE our jailed path

      $indexes = $host->directoryindex;
      if ($indexes)
      {
        foreach($indexes as $index)
        {
          $newname = $basedir . $path . $index;
          
          if (is_file($newname))
          {
            $found = true;
            $filename = $newname;
          }
        }
      }
    }
    
    if (!$found)
      return false;

    $context->response->body = file_get_contents($filename);
    $context->response->setHeader('Date', date ("r", filemtime($filename)));
    $context->response->setHeader('Content-Length', strlen($context->response->body));
    
    $re = strrpos($filename, '.');
    if ($re === false)
      $ext = '';
    else
      $ext = substr($filename, $re+1);

//    $ext = $request->http['ext'];

    if (isset($this->mimes[$ext]))
      $context->response->setHeader('Content-Type', $this->mimes[$ext]);
    else
      $context->response->setHeader('Content-Type', 'application/octet-stream');
    return true;
  }

}

?>